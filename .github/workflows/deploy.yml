name: Deploy ViT to EKS

on:
  push:
    branches:
      - main

jobs:
  debug-iam:
    name: Debug IAM Role in GitHub Actions
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: Debug AWS IAM Role
        run: aws sts get-caller-identity

      - name: Check AWS CLI Version
        run: aws --version

      - name: Ensure GitHub Actions has AWS Permissions
        run: aws eks list-clusters

  deploy:
    name: Build, Push, and Deploy to EKS
    runs-on: ubuntu-latest
    needs: debug-iam # ✅ Ensures IAM role check runs first
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.EKS_REGION }}

      # ✅ Extra Debugging Before Deployment
      - name: Debug AWS IAM Role
        run: aws sts get-caller-identity

      - name: Validate Kubernetes Authentication
        run: kubectl auth can-i get pods --all-namespaces

      - name: Check Kubernetes Cluster Info
        run: kubectl cluster-info

      - name: Check Kubernetes Nodes
        run: kubectl get nodes

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.EKS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}

      - name: Build Docker Image
        run: |
          echo "Building Docker image..."
          docker build -t vit-torchscript:latest .
          echo "Docker image build complete."

      - name: Tag Docker Image
        run: |
          docker tag vit-torchscript:latest ${{ secrets.ECR_REPOSITORY }}:latest

      - name: Push Docker Image to ECR
        run: |
          docker push ${{ secrets.ECR_REPOSITORY }}:latest

      - name: Deploy to EKS
        run: |
          echo "Updating EKS kubeconfig..."
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.EKS_REGION }}
          echo "Updating Kubernetes deployment..."
          kubectl set image deployment/vit-api vit-api=${{ secrets.ECR_REPOSITORY }}:latest --record
          kubectl rollout restart deployment vit-api
          kubectl rollout status deployment vit-api
          echo "Deployment to EKS completed successfully."
