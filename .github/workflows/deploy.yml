name: Deploy ViT to EKS

on:
  push:
    branches:
      - main

jobs:
  debug_iam:
    name: Debug IAM Role in GitHub Actions
    runs-on: ubuntu-latest

    permissions:
      id-token: write # Ensure OIDC authentication is allowed
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.EKS_REGION }}

      - name: Verify AWS Credentials
        run: |
          echo "Checking AWS Credentials..."
          aws configure list

      - name: Debug AWS IAM Role
        run: |
          echo "Checking IAM Role..."
          aws sts get-caller-identity

      - name: Force Stop If IAM Role is Wrong
        run: |
          IAM_ROLE=$(aws sts get-caller-identity --query "Arn" --output text)
          if [[ "$IAM_ROLE" != *"GitHubActionsEKSRole"* ]]; then
            echo "ERROR: GitHub Actions is not assuming the correct role!"
            exit 1
          else
            echo "IAM Role Verified: $IAM_ROLE"
          fi

  deploy:
    needs: debug_iam # Ensures IAM debugging runs before deployment
    name: Build, Push, and Deploy to EKS
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.EKS_REGION }}

      - name: Debug AWS IAM Role (Ensure It Works Here Too)
        run: aws sts get-caller-identity

      - name: Verify Kubernetes Access
        run: |
          echo "Checking EKS Authentication..."
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.EKS_REGION }}
          kubectl get nodes || { echo "ERROR: Kubernetes authentication failed!"; exit 1; }

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.EKS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}

      - name: Build Docker Image
        run: |
          echo "Building Docker image..."
          docker build -t vit-torchscript:latest .
          echo "Docker image build complete."

      - name: Tag Docker Image
        run: |
          echo "Tagging Docker image..."
          docker tag vit-torchscript:latest ${{ secrets.ECR_REPOSITORY }}:latest
          echo "Docker image tagged successfully."

      - name: Push Docker Image to ECR
        run: |
          echo "Pushing Docker image to ECR..."
          docker push ${{ secrets.ECR_REPOSITORY }}:latest
          echo "Docker image pushed to ECR successfully."

      - name: Deploy to EKS
        run: |
          echo "Updating EKS kubeconfig..."
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.EKS_REGION }}
          echo "Updating Kubernetes deployment..."
          kubectl set image deployment/vit-api vit-api=${{ secrets.ECR_REPOSITORY }}:latest --record
          kubectl rollout restart deployment vit-api
          kubectl rollout status deployment vit-api
          echo "Deployment to EKS completed successfully."
